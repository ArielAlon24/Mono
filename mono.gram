<Atom>          ::= LeftParen <Expr> RightParen
                | Integer
                | Float
                | Identifier
                | Identifier RightParen <Parameters> LeftParen
<Power>         ::= <Atom>
                | <Atom> [Pow <Factor>] *

<Factor>        ::= <Power>
                | Sub <Factor>
                | Add <Factor>

<Term>          ::= <Factor>
                | <Factor> [Mul <Factor>] *
                | <Factor> [Div <Factor>] *
                | <Factor> [Mod <Factor>] *

<Expr>          ::= <Term>
                | <Term> [Add <Term>] *
                | <Term> [Min <Term>] *

<Comparison>    ::= <Expr>
                | <Expr> LessThan <Expr>
                | <Expr> [LessThanEq <Expr>] *
                | <Expr> [Greater <Expr>] *
                | <Expr> [GreaterEq <Expr>] *
                | <Expr> [Equals <Expr>] *
                | <Expr> [NotEquals <Expr>] *

<BoolFactor>    ::= <BoolAtom>
                | Not <Comparison>

<BoolTerm>      ::= <BoolFactor> 
                | <BoolFactor> [And <BoolFactor>] *

<BoolExpr>      ::= <BoolTerm>
                | <BoolTerm> [Or <BoolTerm>] *

<Block>         ::= LeftCurly <Program> RightCurly

<Arguments>     ::= 
                | <Identifier> Comma <Arguments>

<Parameters>    ::= <BoolExpr>
                | <BoolExpr> Comma

<Assignment>    ::= Identifier Assignment <Statement>
                | Identifier<Arguments> Assignment <Block>

<If>            ::= If <BoolExpr> <Block>
                | If <BoolExpr> <Block> Else <Block>
                | If <BoolExpr> <Block> <Else> <If>

<While>         ::= While <BoolExpr> <Block>

<Statement>     ::= Let <Assignment>
                | <Assignment>
                | <If>
                | <While>
                | Return <BoolExpr>
                | <BoolExpr> // for testing purposes

<Program>       ::= <Statement> 
                | <Statement> [NewLine <Statement>] * 


